{"version":3,"file":"index.modern.js","sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["export function formattedDate(date: Date): string {\n  // returns date as 11/11/2021\n  // other times it returns 11/11/2021, 12:00:00 AM\n  // which is why we call the .split at the end\n  return date.toLocaleDateString('en-US')\n}\n\n\nexport interface Streak {\n  currentCount: number\n  startDate: String\n  lastLoginDate: string\n}\n\nexport function buildStreak(\n  date: Date,\n  overrideDefaults?: Partial<Streak>): Streak {\n  const defaultStreak = {\n    currentCount: 1,\n    startDate: formattedDate(date),\n    lastLoginDate: formattedDate(date),\n  }\n\n  return {\n    ...defaultStreak,\n    ...overrideDefaults,\n  }\n}\n\nexport const KEY = \"streak\";\n\nexport function updateStreak(storage: Storage, streak: Streak): void {\n  storage.setItem(KEY, JSON.stringify(streak))\n}","import { formattedDate, Streak, buildStreak, KEY, updateStreak } from \"./utils\";\n\nfunction shouldIncrementOrResetStreakCount(\n  currentDate: Date,\n  lastLoginDate: string\n): \"increment\" | \"reset\" | \"none\" {\n  // We get 11/5/2021\n  // so to get 5, we split on / and get the second item\n  const difference = currentDate.getDate() - parseInt(lastLoginDate.split('/')[1])\n  // This means they logged in the day after the currentDate\n  if(difference === 1) {\n    return \"increment\"\n  }\n  if (difference === 0) {\n    return \"none\"\n  }\n  // Otherwise they logged in after a day, which would\n  // break the streak\n  return \"reset\"\n}\n\nexport function streakCounter(storage:Storage, date: Date): Streak {\n\n  const streakInLocalStorage = storage.getItem(KEY);\n  \n  if (streakInLocalStorage) {\n    try {\n      const streak = JSON.parse(streakInLocalStorage) as Streak;\n      const state = shouldIncrementOrResetStreakCount(date, streak.lastLoginDate)\n      const SHOULD_INCREMENT = state === \"increment\";\n      const SHOULD_RESET = state === \"reset\";\n\n      if(SHOULD_INCREMENT) {\n        const updatedStreak = buildStreak(date, {\n          currentCount: streak.currentCount + 1,\n          lastLoginDate: formattedDate(date)\n        })\n\n        updateStreak(storage, updatedStreak);\n\n        return updatedStreak\n      }\n      if (SHOULD_RESET) {\n        const updatedStreak = buildStreak(date)\n\n        updateStreak(storage, updatedStreak);\n\n        return updatedStreak\n      }\n      return streak;\n    } catch (error) {\n      console.error(\"Failed to parse streak from localStorage\");\n    }\n  }\n\n  const streak = buildStreak(date)\n  // store in localstorage\n  updateStreak(storage, streak);\n\n  return streak\n}"],"names":["formattedDate","date","toLocaleDateString","buildStreak","overrideDefaults","currentCount","startDate","lastLoginDate","updateStreak","storage","streak","setItem","JSON","stringify","streakCounter","streakInLocalStorage","getItem","parse","state","currentDate","difference","getDate","parseInt","split","shouldIncrementOrResetStreakCount","SHOULD_RESET","updatedStreak","error","console"],"mappings":"yNAAgBA,EAAcC,GAI5B,OAAOA,EAAKC,mBAAmB,kBAUjBC,EACdF,EACAG,GAOA,YANsB,CACpBC,aAAc,EACdC,UAAWN,EAAcC,GACzBM,cAAeP,EAAcC,IAK1BG,GAMSI,SAAAA,EAAaC,EAAkBC,GAC7CD,EAAQE,QAHS,SAGIC,KAAKC,UAAUH,ICXtB,SAAAI,EAAcL,EAAiBR,GAE7C,MAAMc,EAAuBN,EAAQO,QDMpB,UCJjB,GAAID,EACF,IACE,MAAML,EAASE,KAAKK,MAAMF,GACpBG,EA1BZ,SACEC,EACAZ,GAIA,MAAMa,EAAaD,EAAYE,UAAYC,SAASf,EAAcgB,MAAM,KAAK,IAE7E,OAAkB,IAAfH,EACM,YAEU,IAAfA,EACK,OAIF,QAUWI,CAAkCvB,EAAMS,EAAOH,eAEvDkB,EAAyB,UAAVP,EAErB,GAHmC,cAAVA,EAGJ,CACnB,MAAMQ,EAAgBvB,EAAYF,EAAM,CACtCI,aAAcK,EAAOL,aAAe,EACpCE,cAAeP,EAAcC,KAK/B,OAFAO,EAAaC,EAASiB,GAEfA,EAET,GAAID,EAAc,CAChB,MAAMC,EAAgBvB,EAAYF,GAIlC,OAFAO,EAAaC,EAASiB,GAEfA,EAET,OAAOhB,EACP,MAAOiB,GACPC,QAAQD,MAAM,4CAIlB,MAAMjB,EAASP,EAAYF,GAI3B,OAFAO,EAAaC,EAASC,GAEfA"}